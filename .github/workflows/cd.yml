name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: build/libs/*.jar

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        env:
          JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}
          JDBC_DATABASE_USERNAME: ${{ secrets.JDBC_DATABASE_USERNAME }}
          JDBC_DATABASE_PASSWORD: ${{ secrets.JDBC_DATABASE_PASSWORD }}
        run: |
          ./gradlew check --info --stacktrace --warning-mode=all
          ./gradlew test --warning-mode=all
          ./gradlew jacocoTestReport --warning-mode=all

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-test-report
          path: build/reports/tests/test/

  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin docker.io

      - name: Set Docker BuildKit
        run: export DOCKER_BUILDKIT=1

      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:latest .
          docker tag ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:latest ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:latest
          docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:$IMAGE_TAG

  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Create SSH key
        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem

      - name: Update permission
        run: chmod 400 ssh-key.pem

      - name: Create env file
        run: |
          cat << EOF > .env
          REGISTRY_USER=${{ secrets.REGISTRY_USER }}
          IMAGE_NAME=${{ secrets.IMAGE_NAME }}
          IMAGE_TAG=${{ github.sha }}
          EOF

      - name: Deploy to GCP
        run: |
          scp -o StrictHostKeyChecking=no -i ssh-key.pem -r ./.env ./docker-compose.yml ./monitoring ./deploy.sh ./rollback.sh ./current_version.txt ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_STATIC_IP }}:/home/joel_rompis
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_STATIC_IP }} "
            sudo chmod +x /home/joel_rompis/deploy.sh /home/joel_rompis/rollback.sh;
            sudo /home/joel_rompis/deploy.sh ${{ github.sha }} latest
          "
